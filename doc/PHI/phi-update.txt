1. Running phi-update

   phi-update has the following syntax:

   phi-update [options] [/path/to/old/RPMS] /path/to/newer/RPMS

   If no old RPMs path is specified, the current system will be used.

   Possible options are:

   --indeed 
   	
	Actually start upgrading. Useful only when upgrading an
	installed system, not for upgrading between two sets of RPMs.

   --suggest /path/to/suggestlist

   	This points to a list of 'suggested' RPMs, with entries of the format:

	xyz:abc,def

	If xyz was present in the old system, abc and def will be installed
	in the new one. (Like: kdebase:kdebase2)

   -v / --verbose
   	
	Output the list of actions that will be done in the dry run.
	(If not set, will just output a Lizard friendly string.)

   --root /root/dir/of/used/installation

   	Handle an installation with a different root mountpoint like
	/mnt/root/ for the Lizard.

	If this option is not specified the currently running system 
	will be upgraded. This is only recommended if no system services
	are running (single user maintanence mode).

2. How does it work

   
   a. Calculate the update set

      This uses the C++ program 'phi-gen-upgrade' to calculate a the 
      set of RPMs to update/remove/install and its interlocked RPMs.

      This is using deeper PHI magic which is not explained here.

      This program is called:

      phi-gen-upgrade [options]

      Options can be:

      --to /path/to/new/RPMS		[required]

      	Specifies Path of new RPMs (to which upgrade).

      --from /path/to/old/RPMS		[optional]
        
	Specifies Path of old RPMs (from which to upgrade). If this
	option is not specified, the current installed system is used
	as reference.


      --root /path/to/rootdir/

        Specifies the path to the root directory of the current installation
	used, like /mnt/root/ in the lizard. If not specified, the current
	running system is used.

      --add /path/to/suggestlist
        
	Specifies the path to the suggestlist.

      --pretty

        Shows the errors a bit prettier ('userfriendlier').
	
      --list /list/of/RPMS
      --list -

        Reads a list of RPM names to upgrade from /list/of/RPMs or stdin if
	- is specified.


     This tool outputs a list of the following format:

     install:rpmname
     interlocked:rpmname1,rpmname2,rpmname3,!rpmname4

     remove:rpmname4
     interlocked:!rpmname4,rpmname1

     install and remove are actions to be taken for the RPM listed after it.
     The interlocked line shows updates that need to have happened before
     or at the same time of this one.

  b. Calculate the update order
     
     This is done by the 'phi-upgrade' perl script after calling
     phi-gen-upgrade and reading its output.

     It takes the output and generates a string of updates which can
     be safely done using 'rpm -Uvh' (or 'rpm -e').

     This also groups RPMs to a single update set if possible.

     If run in dryrun mode it will only output what will happen and the
     total number of RPMs to upgrade.

     If run in indeed mode, it will execute all the RPM actions. If one of
     them fails it is repeated with '--force', and if that fails with
     '--force --nodeps'.

     Before starting the update the script '/usr/lib/PHI/phi-upgrade-start.fixup'
     will be run. After finishing the upgrade the script
     '/usr/lib/PHI/phi-upgrade-end.fixup' will be run.

     For every package a script '/usr/lib/PHI/<package>.prefixup' and
     '/usr/lib/PHI/<package>.postfixup' will be executed if it exists
     right before or after upgrading the respective RPM set.

3. RPM layout

     PHI shall contain all the programs and scripts necessary to do the
     upgrade. It should be version independend.

     PHI-data shall contain all the version dependend scripts and lists.
